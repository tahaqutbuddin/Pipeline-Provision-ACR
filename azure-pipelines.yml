trigger:
- master

resources:
- repo: self

variables:
  containerRegistry: 'logixoscontainerreg.azurecr.io'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Infrastructure_Provisioning
  displayName: "Provision ACR, Resource group on Azure"
  jobs:
    - job: Provision
      displayName: Validate and provision
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(azure-connection)
          backendAzureRmResourceGroupName: $(storage-resource-group)
          backendAzureRmStorageAccountName: $(storage-account)
          backendAzureRmContainerName: $(storage-container)
          backendAzureRmKey: $(storage-key)
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: $(azure-connection)
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '--auto-approve'
          environmentServiceNameAzureRM: $(azure-connection)
      # - task: PowerShell@2
      #   displayName: 'Capture Terraform output variables and push to pipeline variables'
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       $tfoutput = (terraform output --json) | ConvertFrom-Json
      #       if ($tfoutput -eq $null) {
      #         Write-Host("No Terraform output variables found")
      #       } else {
      #         foreach($outputVar in $tfoutput.psobject.properties) { 
      #           Write-Host("##vso[task.setvariable variable=$($outputVar.name);]$($outputVar.value.value)")
      #           Write-Host("$($outputVar.name)-$($outputVar.value.value)")
      #         }
      #       }
    - job: Build_Docker_And_Deploy
      dependsOn: Provision
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: Docker@2
        inputs:
          command: 'build'
          Dockerfile: '**/Dockerfile'
          repository: "pythonimage"
      - task: AzureCLI@2
        displayName: 'Push Docker Image to ACR'
        inputs:
          azureSubscription: $(azure-connection)
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az acr login --name 'logixoscontainerreg'
            docker tag pythonimage:latest logixoscontainerreg.azurecr.io/pythonimage:latest
            docker push logixoscontainerreg.azurecr.io/pythonimage:latest
