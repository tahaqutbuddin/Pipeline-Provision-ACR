trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
- stage: Infrastructure_Provisioning
  displayName: "Provision ACR, Resource group on Azure"
  jobs:
    - job: Provision
      displayName: Validate and provision
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(azure-connection)
          backendAzureRmResourceGroupName: $(storage-resource-group)
          backendAzureRmStorageAccountName: $(storage-account)
          backendAzureRmContainerName: $(storage-container)
          backendAzureRmKey: $(storage-key)
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: $(azure-connection)
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '--auto-approve'
          environmentServiceNameAzureRM: $(azure-connection)
      - task: PowerShell@2
        displayName: 'Capture Terraform output variables and push to pipeline variables'
        inputs:
          targetType: 'inline'
          script: |
            $tfoutput = (terraform output --json) | ConvertFrom-Json
            if ($tfoutput -eq $null) {
              Write-Host("No Terraform output variables found")
            } else {
              foreach($outputVar in $tfoutput.psobject.properties) { 
                Write-Host("##vso[task.setvariable variable=$($outputVar.name);isoutput=true]$($outputVar.value.value)")
                Write-Host("$($outputVar.name)-$($outputVar.value.value)")
              }
            }
          # script: |
          #   if ($tfoutput -eq $null) {
          #     Write-Output "No Terraform output variables found"
          #   } else {
          #     $outputVariables = @{}
          #     foreach ($outputVar in $tfoutput.psobject.properties) { 
          #       $variableName = $outputVar.name
          #       $variableValue = $outputVar.value.value
          #       Write-Output "$variableName-$variableValue"
          #       $outputVariables[$variableName] = $variableValue
          #     }
          #     Write-Output "##vso[task.setvariable variable=outputVariables;]$(ConvertTo-Json $outputVariables -Depth 5)"
          #   }
    - job: Build_Docker_And_Deploy
      dependsOn: Provision
      variables:
        acr_login_server: $[ dependencies.Provision.outputs['passOutput.acr_login_server'] ]  
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: Docker@2
        displayName: Build and publish image to Azure Container Registry
        inputs:
          command: buildAndPush
          containerRegistry: $(acr_login_server)
          repository: "python-image"
          dockerfile: "**/Dockerfile"


# steps:
# - task: TerraformInstaller@1
#   inputs:
#     terraformVersion: 'latest'
# - task: TerraformTaskV4@4
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     backendServiceArm: $(azure-connection)
#     backendAzureRmResourceGroupName: $(storage-resource-group)
#     backendAzureRmStorageAccountName: $(storage-account)
#     backendAzureRmContainerName: $(storage-container)
#     backendAzureRmKey: $(storage-key)
# - task: TerraformTaskV4@4
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     environmentServiceNameAzureRM: $(azure-connection)
# - task: TerraformTaskV4@4
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     commandOptions: '--auto-approve'
#     environmentServiceNameAzureRM: $(azure-connection)



